import LinearAlgebra.Vector
import Aesop

-- source: https://github.com/lecopivo/LeanColls/blob/main/LeanColls/Classes/IndexType.lean
class IndexType (a : Type) where
  cardinality : ‚Ñï
  to_fin : a ‚Üí Fin cardinality
  from_fin : Fin cardinality ‚Üí a
  bijection : ‚àÄ (i : a), from_fin (to_fin i) = i

instance : IndexType (Fin n) where
  cardinality := n
  to_fin := id
  from_fin := id
  bijection := by
    intros;
    simp

instance [ait: IndexType Œ±] [bit: IndexType Œ≤] : IndexType ( Œ± √ó Œ≤ ) where
  cardinality := (IndexType.cardinality Œ±) * (IndexType.cardinality Œ≤)
  to_fin := Œª (a, b) =>
      let ‚ü®a,ha‚ü© := IndexType.to_fin a;
      let ‚ü®b,hb‚ü© := IndexType.to_fin b;
      ‚ü®
        a * (IndexType.cardinality Œ≤) + b,
        by calc
          _ < a * IndexType.cardinality Œ≤ + IndexType.cardinality Œ≤ := by
            apply Nat.add_lt_add_left hb
          _ ‚â§ IndexType.cardinality Œ± * IndexType.cardinality Œ≤ := by
            rw [‚Üê Nat.succ_mul]
            apply Nat.mul_le_mul_right
            exact ha
      ‚ü©
  from_fin := Œª ‚ü®i,hi‚ü© =>
    have hq : i / IndexType.cardinality Œ≤ < IndexType.cardinality Œ± := Nat.div_lt_of_lt_mul (by rw [Nat.mul_comm]; exact hi);
    have b_gt_0 : 0 < IndexType.cardinality Œ≤ := by
      apply Nat.pos_of_ne_zero;
      intro h;
      rw [h] at hi;
      rw [Nat.mul_zero] at hi;
      contradiction;
    have hr : i % IndexType.cardinality Œ≤ < IndexType.cardinality Œ≤ := Nat.mod_lt i (by assumption);
    (
      IndexType.from_fin ‚ü®i / IndexType.cardinality Œ≤, hq‚ü©,
      IndexType.from_fin ‚ü®i % IndexType.cardinality Œ≤, hr‚ü©
    )
  bijection := by
    intro p;
    cases p;
    simp;
    rename_i fst snd;
    apply And.intro;
    sorry

structure Tensor (Œ± : Type u) (Œπ: Type) [i: IndexType Œπ] where
  data: Array Œ±
  -- a proof that the data.length = n
  isEq: data.size = i.cardinality
deriving Repr

namespace Tensor
def proveLen {Œπ: Type} {Œπ': Type} [IndexType Œπ] [i': IndexType Œπ'] (t:Tensor Œ± Œπ) (h: t.data.size = i'.cardinality): Tensor Œ± Œπ' := {
  data := t.data,
  isEq := h
}

@[inline]
def replicate (Œπ: Type) [i: IndexType Œπ] (x: Œ±) : Tensor Œ± Œπ := {
    data := Array.mkArray (i.cardinality) x,
    isEq := Array.size_mkArray (i.cardinality) x
}

@[inline]
def ofFnMono [it: IndexType Œπ] (f: Fin it.cardinality -> Œ±) : Tensor Œ± Œπ := {
  data := Array.ofFn f,
  isEq := Array.size_ofFn f
}

@[inline]
def ofFn [IndexType Œπ] (f: Œπ -> Œ±) : Tensor Œ± Œπ :=
  ofFnMono (Œª i => f (IndexType.from_fin i))

def ofArray (a:Array Œ±) : Tensor Œ± (Fin a.size) := {
  data := a,
  isEq := rfl
}

@[inline]
def ofList (l:List Œ±) : Tensor Œ± (Fin l.length) := {
  data := Array.mk l,
  isEq := Array.size_mk l
}

syntax "!t[" withoutPosition(sepBy(term, ", ")) "]" : term
macro_rules
  | `(!t[ $elems,* ]) => `(Tensor.ofList [ $elems,* ])


@[inline]
def singleton (x:Œ±) : Tensor Œ± (Fin 1) :=
  Tensor.replicate (Fin 1) x

/-- prove that i < t.data.size if i < t.cardinality-/
theorem lt_n_lt_data_size [it: IndexType Œπ] (t: Tensor Œ± Œπ) (i : Fin it.cardinality)
  : (i < t.data.size)
  := Nat.lt_of_lt_of_eq i.isLt (Eq.symm t.isEq)

/-- prove that i < n if i < v.array.size-/
theorem lt_data_size_lt_n [it: IndexType Œπ] {i n :Nat}  (t: Tensor Œ± Œπ) (h: i < t.data.size)
  : (i < it.cardinality)
  := t.isEq.symm ‚ñ∏ h


@[inline]
def getMono [it: IndexType Œπ] (t: Tensor Œ± Œπ) (i : Fin it.cardinality) : Œ± :=
  t.data.get ‚ü®i.val, (lt_n_lt_data_size t i)‚ü©

@[inline]
def get [IndexType Œπ] (t: Tensor Œ± Œπ) (i : Œπ) : Œ± :=
  getMono t (IndexType.to_fin i)

-- instance to get element
instance [IndexType Œπ] : GetElem (Tensor Œ± Œπ) Œπ Œ± (fun _ _ => true) where
  getElem xs i _ := xs.get i

@[inline]
def setMono [it: IndexType Œπ] (t: Tensor Œ± Œπ) (i : Fin it.cardinality) (a : Œ±) : Tensor Œ± Œπ :=
  -- prove that i ‚â§ v.data.length
  let i :=  ‚ü®i.val, (Nat.lt_of_lt_of_eq i.isLt (Eq.symm t.isEq))‚ü©;
  {
    data := Array.set t.data i a,
    isEq := Eq.trans (Array.size_set t.data i a) t.isEq
  }

@[inline]
def set [IndexType Œπ] (t: Tensor Œ± Œπ) (i : Œπ) (a : Œ±) : Tensor Œ± Œπ :=
  setMono t (IndexType.to_fin i) a

@[inline]
def zipWith [it: IndexType Œπ] {Œ± : Type u} {Œ≤ : Type u} {Œ≥ : Type u} (f: Œ± ‚Üí Œ≤ ‚Üí Œ≥) (t1: Tensor Œ± Œπ) (t2: Tensor Œ≤ Œπ): Tensor Œ≥ Œπ :=
  -- create vector
  let v1: Vector Œ± it.cardinality := ‚ü®t1.data, t1.isEq‚ü©;
  let v2: Vector Œ≤ it.cardinality := ‚ü®t2.data, t2.isEq‚ü©;
  -- zipWith
  let v3 := Vector.zipWith f v1 v2;
  -- back to tensor
  {
    data := v3.data,
    isEq := v3.isEq
  }

@[inline]
def map [IndexType Œπ] {Œ± : Type u} {Œ≤ : Type u} (f: Œ± ‚Üí Œ≤) (t: Tensor Œ± Œπ) : Tensor Œ≤ Œπ := {
  data := Array.map f t.data,
  isEq := Eq.trans (Array.size_map f t.data) t.isEq
}

@[inline]
def mapIdxMono [it: IndexType Œπ] {Œ± : Type u} {Œ≤ : Type u} (f: Fin it.cardinality ‚Üí Œ± ‚Üí Œ≤) (t: Tensor Œ± Œπ) : Tensor Œ≤ Œπ :=
  letI f' := fun (i: Fin t.data.size) => f (Fin.mk i.val (Nat.lt_of_lt_of_eq i.isLt t.isEq));
  {
    data := Array.mapIdx t.data f',
    isEq := Eq.trans (Array.size_mapIdx t.data f') t.isEq
  }

@[inline]
def mapIdx [IndexType Œπ] {Œ± : Type u} {Œ≤ : Type u} (f: Œπ ‚Üí Œ± ‚Üí Œ≤) (t: Tensor Œ± Œπ) : Tensor Œ≤ Œπ :=
  mapIdxMono (Œª i a => f (IndexType.from_fin i) a) t


def zero [Zero Œ±] [IndexType Œπ]: Tensor Œ± Œπ := Tensor.replicate Œπ 0

def one [One Œ±] [IndexType Œπ]: Tensor Œ± Œπ := Tensor.replicate Œπ 1

def neg [Neg Œ±] [IndexType Œπ] (t: Tensor Œ± Œπ) : Tensor Œ± Œπ := Tensor.map (-¬∑) t

def add [Add Œ±] [IndexType Œπ] (a b: Tensor Œ± Œπ) : Tensor Œ± Œπ :=
  Tensor.zipWith (¬∑+¬∑) a b

def sub [Sub Œ±] [IndexType Œπ] (a b: Tensor Œ± Œπ) : Tensor Œ± Œπ :=
  Tensor.zipWith (¬∑-¬∑) a b

def scale [Mul Œ±] [IndexType Œπ] (k: Œ±) (t: Tensor Œ± Œπ) : Tensor Œ± Œπ :=
  t.map (fun x => k*x)

def hadamard [Mul Œ±] [IndexType Œπ] (a b: Tensor Œ± Œπ) : Tensor Œ± Œπ :=
  Tensor.zipWith (¬∑*¬∑) a b


/-- Object permanence??? üò≥ -/
@[simp]
theorem get_set_eq_mono [it: IndexType Œπ] (t: Tensor Œ± Œπ) (i: Fin it.cardinality) (a: Œ±)
  : Tensor.getMono (Tensor.setMono t i a) i = a
  := Array.get_set_eq t.data ‚ü®i, lt_n_lt_data_size t i‚ü© a

@[simp]
theorem get_set_eq [IndexType Œπ] (t: Tensor Œ± Œπ) (i: Œπ) (a: Œ±)
  : Tensor.get (Tensor.set t i a) i = a
  := get_set_eq_mono t (IndexType.to_fin i) a

/-- If we construct a vector through ofFn, then each element is the result of the function -/
@[simp]
theorem get_ofFnMono [it: IndexType Œπ] (f: Fin it.cardinality -> Œ±) (i: Fin it.cardinality)
  : (Tensor.ofFnMono f).getMono i = f i
  :=
    -- prove that the i < Array.size (Array.ofFn f)
    have i_lt_size_ofFn_data : i.val < Array.size (Array.ofFn f) := lt_n_lt_data_size (ofFn f) i
    -- prove that v.data.get i = f i
    Array.getElem_ofFn f i.val i_lt_size_ofFn_data

/-- If we construct a vector through ofFn, then each element is the result of the function -/
@[simp]
theorem get_ofFn [it: IndexType Œπ] (f: Œπ -> Œ±) (i: Œπ)
  : (Tensor.ofFn f).get i = f i
  :=
    by
      unfold Tensor.ofFn;
      unfold Tensor.get;
      rw [get_ofFnMono];
      rw [it.bijection i]

theorem get_mapMono [it: IndexType Œπ] {Œ± : Type u} {Œ≤ : Type u}  (f: Œ± ‚Üí Œ≤) (t: Tensor Œ± Œπ) (i: Fin it.cardinality)
  : (t.map f).getMono i = f (t.getMono i)
  := Array.getElem_map f t.data i (lt_n_lt_data_size (t.map f) i)

theorem get_map [IndexType Œπ] {Œ± : Type u} {Œ≤ : Type u}  (f: Œ± ‚Üí Œ≤) (t: Tensor Œ± Œπ) (i: Œπ)
  : (t.map f).get i = f (t.get i)
  := get_mapMono f t (IndexType.to_fin i)

theorem get_mapIdxMono {Œ± : Type u} {Œ≤ : Type u} {n: Nat} (f: Fin n ‚Üí Œ± ‚Üí Œ≤) (v: Vector Œ± n) (i: Fin n)
  : (v.mapIdx f)[i] = f i v[i]
  :=
    letI f' := fun (i: Fin v.data.size) => f (Fin.mk i.val (Nat.lt_of_lt_of_eq i.isLt v.isEq))
    Array.getElem_mapIdx v.data f' i (lt_n_lt_data_size (v.mapIdx f) i)


end Tensor
